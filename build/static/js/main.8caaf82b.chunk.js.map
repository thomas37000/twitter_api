{"version":3,"sources":["component/Card.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Card","post","useState","className","src","user","avatar_url","alt","name","media_url","content","title","text","href","pub_url","pub_date","App","posts","setPosts","params","s","t","object","type","network","per_page","useEffect","axios","get","then","res","data","console","log","catch","error","message","response","errorMessage","map","session","session_id","pub_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAOe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAAQ,EACXC,oBAAS,GADE,6BAGrC,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBACEA,UAAU,UACVC,IAAKH,EAAKI,KAAKC,WACfC,IAAKN,EAAKI,KAAKG,OAEjB,qBAAKL,UAAU,UAAf,SACGF,EACC,qBAAKE,UAAU,SAAf,SACE,qBAAKC,IAAKH,EAAKQ,UAAWF,IAAI,OAGhC,qBAAKJ,UAAU,UAAf,SACE,qBAAKC,IAAKH,EAAKQ,UAAWF,IAAI,YAKtC,sBAAKJ,UAAU,WAAf,UACE,6BAAKF,EAAKS,UACV,oBAAIP,UAAU,aAAd,SAA4BF,EAAKU,QACjC,mBAAGR,UAAU,YAAb,SAA0BF,EAAKW,OAC/B,iCACE,mBAAGC,KAAMZ,EAAKa,QAASX,UAAU,aAAjC,oBAIF,qBAAKA,UAAU,OAAf,SAAuBF,EAAKc,iBCnCpC,IA0CeC,EA1CH,WAAO,IAAD,EACUd,mBAAS,IADnB,mBACTe,EADS,KACFC,EADE,KAIVC,EAAS,CACbC,EAAG,UACHC,EAAG,mCACHC,OAAQ,OACRC,KAAM,MACNC,QAAS,UACTC,SAAU,IAuBZ,OApBAC,qBAAU,WACRC,IACGC,IADH,UAXc,iCAYO,CAAET,WACpBU,MAAK,SAACC,GAAD,OAASA,EAAIC,QAClBF,MAAK,SAACE,GACLb,EAASa,GACTC,QAAQC,IAAI,gBAAiBF,MAE9BG,OAAM,SAACC,GACN,IAAIC,EACAD,EACFC,EAAU,6CAEVA,EAAUD,EAAME,SAASN,KAAKO,aAC9BN,QAAQC,IAAIG,GACZJ,QAAQC,IAAIE,SAGjB,IAGD,qBAAKhC,UAAU,UAAf,SACGc,EAAMsB,KAAI,SAACtC,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,EAAMuC,QAASvC,EAAKwC,YAAvCxC,EAAKyC,cC5BTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8caaf82b.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react/jsx-curly-brace-presence */\n/* eslint-disable react/prop-types */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Card.css\";\n\nexport default function Card({ post }) {\n  const [isImg, setIsImg] = useState(true);\n\n  return (\n    <div className=\"card\">\n      <div className=\"headerCard\">\n        <img\n          className=\"cardImg\"\n          src={post.user.avatar_url}\n          alt={post.user.name}\n        />\n        <div className=\"cardImg\">\n          {post ? (\n            <div className=\"getImg\">\n              <img src={post.media_url} alt=\"\" />\n            </div>\n          ) : (\n            <div className=\"hideImg\">\n              <img src={post.media_url} alt=\"\" />\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"cardBody\">\n        <h3>{post.content}</h3>\n        <h5 className=\"card-title\">{post.title}</h5>\n        <p className=\"card-text\">{post.text}</p>\n        <button>\n          <a href={post.pub_url} className=\"socialLink\">\n            link\n          </a>\n        </button>\n        <div className=\"date\">{post.pub_date}</div>\n      </div>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  post: PropTypes.shape({\n    avatar_url: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    media_url: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    pub_date: PropTypes.string.isRequired,\n    pub_url: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Card from './component/Card';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  \n  const API_URL = \"https://slideyour.net/api.php\";\n  const params = {\n    s: 'thomas4',\n    t: 'ddf1f0d7ee779ed42772231fa903a43b',\n    object: 'post',\n    type: 'get',\n    network: 'twitter',\n    per_page: 30,\n  };\n\n  useEffect(() => {\n    axios\n      .get(`${API_URL}`, { params })\n      .then((res) => res.data)\n      .then((data) => {\n        setPosts(data);\n        console.log(\"twitter posts\", data);\n      })\n      .catch((error) => {\n        let message;\n        if (error) {\n          message = \"vous n' avez pas accès à cette page\";\n        } else {\n          message = error.response.data.errorMessage;\n          console.log(message);\n          console.log(error);\n        }\n      });\n  }, []);\n\n  return (\n    <div className=\"galerie\">\n      {posts.map((post) => (\n        <Card key={post.pub_id} post={post} session={post.session_id} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}